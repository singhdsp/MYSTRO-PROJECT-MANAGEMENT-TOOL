// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  fullName       String
  email          String? //Change To Required In Prod
  photoURL       String?
  notes          String?
  rate           Int?        @default(0)
  registerData   DateTime    @default(now()) @db.Timestamptz(3)
  projects       Project[]
  projectsAdmin  Project[]   @relation("adminRelation")
  TaskHours      TaskHours[]
  readTasks      Task[]      @relation("readUsers")
  tasks          Task[]      @relation("taskUsers")
  Attendace      Attendace[]
  role           UserRole
  // Contractor-Worker relationship
  contractor     User?       @relation("ContractorToWorkers", fields: [contractorId], references: [id])
  contractorId   String?
  workers        User[]      @relation("ContractorToWorkers")
  contractorNote String?     @default("")
  comments       Comments[]
}

model Project {
  id        String      @id @default(uuid())
  name      String
  startDate DateTime    @default(now()) @db.Timestamptz(3)
  endDate   DateTime    @default("3000-01-01T00:00:00.000Z")
  members   User[]
  admin     User        @relation("adminRelation", fields: [adminId], references: [id])
  adminId   String
  tasks     Task[]
  taskHours TaskHours[]
}

model Task {
  id            String       @id @default(uuid())
  project       Project      @relation(fields: [projectId], references: [id])
  projectId     String
  taskHours     TaskHours[]
  startDate     DateTime
  endDate       DateTime     @default("3000-01-01T00:00:00.000Z")
  status        TaskStatus   @default(Not_Yet_Started)
  statusHistory StatusLog[]
  description   String
  name          String?
  nameAudioURL  String?
  descAudio     String?
  descPhoto     String?
  photos        Attachment[]
  readUsers     User[]       @relation("readUsers")
  members       User[]       @relation("taskUsers")
  comments      Comments[]
}

model StatusLog {
  id     String   @id @default(uuid())
  Task   Task     @relation(fields: [taskId], references: [id])
  taskId String
  date   DateTime @default(now()) @db.Timestamptz(3)
  status String
}

model TaskHours {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  hours     Int
  date      DateTime @default(now()) @db.Timestamptz(3)
}

model Attendace {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  inTime          DateTime
  inTimePhotoURL  String
  outTime         DateTime?
  outTimePhotoURL String?
  date            DateTime
}

model Attachment {
  id     String         @id @default(uuid())
  task   Task           @relation(fields: [taskId], references: [id])
  taskId String
  type   AttachmentType
  url    String
}

model Comments {
  id       String   @id @default(uuid())
  task     Task     @relation(fields: [taskId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  date     DateTime @default(now()) @db.Timestamptz(3)
  content  String?
  audioURL String?
  sender   String
  taskId   String
  userId   String
}

enum AttachmentType {
  BEFORE_PHOTO
  AFTER_PHOTO
}

enum UserRole {
  Contractor
  Worker
}

enum TaskStatus {
  In_Progress
  Not_Yet_Started
  Completed
  Blocked
}
